name: Backend API Pipeline

on:
  pull_request:
    paths:
      - 'backend/**'
  workflow_dispatch:

env:
  APPLICATION_SOURCES_ROOT: backend/src
  APPLICATION_NAME: JobGuard.Api
  DOTNET_SDK_VERSION: 8.x
  DOTNET_NOLOGO: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v4

      - name: Restore NuGet packages cache
        id: nuget-cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}-${{ hashFiles('**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Generate SemVer version
        id: semver
        run: |
          MAJOR=1  # Update this manually when breaking changes are made
          MINOR=$(git rev-list --count origin/master)  # Count of commits as MINOR version
          PATCH=$(git rev-list --count HEAD ^origin/master)  # Count of commits since main as PATCH version
          BUILD_METADATA=${GITHUB_RUN_NUMBER}+${GITHUB_SHA::7}  # Build number + shortened commit hash
          VERSION="$MAJOR.$MINOR.$PATCH"

          # Add build metadata (GitHub run number and commit hash)
          VERSION="$VERSION+$BUILD_METADATA"

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Save build metadata to environment variables
        run: |
          echo "VERSION=${{ env.VERSION }}" >> $GITHUB_ENV
          echo "COMMIT_HASH=${{ github.sha }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_ENV
          echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Print saved metadata
        run: |
          echo "Version: ${{ env.VERSION }}"
          echo "Commit Hash: ${{ env.COMMIT_HASH }}"
          echo "Branch: ${{ env.BRANCH_NAME }}"
          echo "Build Time: ${{ env.BUILD_TIMESTAMP }}"
          echo "Build Number: ${{ env.BUILD_NUMBER }}"

      - name: Create build metadata JSON
        run: |
          echo '{
            "Version": "${{ env.VERSION }}",
            "CommitHash": "${{ github.sha }}",
            "Branch": "${{ github.ref_name }}",
            "BuildTime": "${{ env.BUILD_TIMESTAMP }}",
            "BuildNumber": "${{ github.run_number }}"
          }' > backend/src/JobGuard.Api/Resources/build-metadata.json

      - name: Restore NuGet packages
        run: dotnet restore backend/JobGuard.sln

      - name: Cache new or updated NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}-${{ hashFiles('**/*.sln') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
        if: steps.nuget-cache.outputs.cache-hit != 'true'  # Only update cache if it's not already restored

      - name: Build Backend API
        run: |
          dotnet build \
          ${{ env.APPLICATION_SOURCES_ROOT }}/${{ env.APPLICATION_NAME }}/${{ env.APPLICATION_NAME }}.csproj \
          --configuration Release \
          --no-restore

  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Format only modified files
        run: |
          MODIFIED_FILES=$(git diff --name-only origin/master...HEAD -- '*.cs')
          if [ -n "$MODIFIED_FILES" ]; then
            echo "$MODIFIED_FILES" | xargs dotnet format backend/JobGuard.sln --include --verify-no-changes
          else
            echo "No C# files modified. Skipping format check."
          fi

      - name: Comment on PR if Linting Fails
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              body: "ðŸš¨ **Linting Check Failed**: Please fix the formatting issues before merging.\n\nYou can run `dotnet format` locally to automatically correct these issues."
            })
